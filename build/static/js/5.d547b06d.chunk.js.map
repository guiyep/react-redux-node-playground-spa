{"version":3,"sources":["routes/complete-list/CompleteList.module.css","components/filter-owners/FilterOwners.jsx","routes/complete-list/CompleteList.jsx","components/repos-list/ReposList.module.css","components/repos-container/ReposContainer.jsx","actions/repos/repos-collection.js","components/hoc/WithLoadingIndicator.jsx","components/repos-container/index.js","components/repos-list/ReposList.jsx","components/repos-list/index.js"],"names":["module","exports","CompleteList_container","CompleteList_filters","CompleteList_list","FilterOwners","memo","_ref","onChange","value","react_default","a","createElement","input","placeholder","defaultValue","defaultProps","undefined","CompleteList","reposList","onLoad","location","history","onOwnerTextChanged","useCallback","e","target","push","concat","searchByOwner","queryString","parse","search","repos","useMemo","reduce","acc","repo","length","owner","includes","Object","objectSpread","languages","join","className","filter_owners_FilterOwners","repos_list","list","columns","defaultName","ReposContainer","ReposList_container","ReposList_group_by","ReposList_header","ReposList_row","ReposList_cell","mapStateToProps","state","isLoading","data","mapDispatchToProps","dispatch","asyncToGenerator","regenerator_default","mark","_callee","getState","localStorage","savedData","response","_ref2","repositories","_args","arguments","wrap","_context","prev","next","window","abrupt","getItem","type","LOAD_REPOS_ACTION","payload","JSON","START_LOAD_REPOS_ACTION","fetch","headers","Content-Type","sent","status","ERROR_LOAD_REPOS_ACTION","json","setItem","stringify","t0","stop","_x","_x2","apply","this","WrapperComponent","WrapperComponentWithLoadingIndicator","props","react","WithLoadingIndicator","connect","__webpack_require__","d","__webpack_exports__","buildHeader","map","columnName","index","key","charAt","toUpperCase","slice","buildRows","item","rowIndex","columnIndex","ReposList","groupBy","useEffect","currentList","values","groupByValue","filter","listItem","currentItem","repos_list_ReposList"],"mappings":"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","file":"static/js/5.d547b06d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CompleteList_container\":\"CompleteList_CompleteList_container__1BEXM\",\"CompleteList_filters\":\"CompleteList_CompleteList_filters__EQfBt\",\"CompleteList_list\":\"CompleteList_CompleteList_list__1acDh\"};","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'antd';\n\nconst FilterOwners = memo(({ onChange, value }) => {\n  return <Input placeholder=\"Filter owners...\" defaultValue={value} onChange={onChange} />;\n});\n\nFilterOwners.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string,\n};\n\nFilterOwners.defaultProps = {\n  value: undefined,\n};\n\nexport default FilterOwners;\n","import React, { memo, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { ReposList } from '../../components/repos-list';\nimport { ReposContainer } from '../../components/repos-container';\nimport { FilterOwners } from '../../components/filter-owners';\nimport { CompleteList_container, CompleteList_filters, CompleteList_list } from './CompleteList.module.css';\nimport queryString from 'query-string';\n\nconst filterByOwnerText = 'owner';\n\nconst CompleteList = memo(({ reposList, onLoad, location, history }) => {\n  const onOwnerTextChanged = useCallback(\n    e => {\n      const currentOwner = e.target.value;\n      if (!currentOwner) {\n        history.push(`#`);\n      } else {\n        history.push(`?${filterByOwnerText}=${e.target.value}`);\n      }\n    },\n    [history],\n  );\n\n  const queryStringObject = queryString.parse(location.search);\n  const searchByOwner = queryStringObject[filterByOwnerText];\n\n  const repos = useMemo(() => {\n    // filter and map at the same time\n    return reposList.reduce((acc, repo) => {\n      const hasValue =\n        searchByOwner && searchByOwner.length > 0 ? repo.owner && repo.owner.includes(searchByOwner) : true;\n      if (hasValue) {\n        acc.push({ ...repo, languages: repo.languages.join(', ') });\n      }\n      return acc;\n    }, []);\n  }, [reposList, searchByOwner]);\n\n  return (\n    <div className={CompleteList_container}>\n      <div className={CompleteList_filters}>\n        <FilterOwners onChange={onOwnerTextChanged} value={searchByOwner} />\n      </div>\n      <div className={CompleteList_list}>\n        <ReposList list={repos} onLoad={onLoad} columns={['name', 'owner', 'languages']} />\n      </div>\n    </div>\n  );\n});\n\nCompleteList.defaultName = 'CompleteList';\n\nCompleteList.propTypes = {\n  reposList: PropTypes.arrayOf(PropTypes.object),\n};\n\nCompleteList.defaultProps = {\n  reposList: [],\n};\n\nexport default ReposContainer(CompleteList);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ReposList_container\":\"ReposList_ReposList_container__366Dp\",\"ReposList_group_by\":\"ReposList_ReposList_group_by__1fu9c\",\"ReposList_header\":\"ReposList_ReposList_header__n0MUt\",\"ReposList_row\":\"ReposList_ReposList_row__151Hk\",\"ReposList_cell\":\"ReposList_ReposList_cell__1sA-k\"};","import { connect } from 'react-redux';\nimport { reposCollectionAction } from '../../actions/repos';\nimport { WithLoadingIndicator } from '../hoc';\n\nconst mapStateToProps = state => {\n  return {\n    isLoading: state.repos.isLoading,\n    reposList: state.repos && state.repos.data,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onLoad: () => dispatch(reposCollectionAction()),\n});\n\nexport default WrapperComponent => {\n  const WrapperComponentWithLoadingIndicator = WithLoadingIndicator(WrapperComponent);\n\n  return connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(WrapperComponentWithLoadingIndicator);\n};\n","import { LOAD_REPOS_ACTION, START_LOAD_REPOS_ACTION, ERROR_LOAD_REPOS_ACTION } from '../../constants/repos';\n\nexport const uniqueIdentifier = 'repos-local-storage';\n\nexport const reposCollectionAction = () => async (dispatch, getState, localStorage = window.localStorage) => {\n  try {\n    const state = getState();\n    if (state.data) {\n      return;\n    }\n\n    const savedData = localStorage.getItem(uniqueIdentifier);\n    if (savedData) {\n      dispatch({\n        type: LOAD_REPOS_ACTION,\n        payload: JSON.parse(savedData),\n      });\n      \n    } else {\n      dispatch({\n        type: START_LOAD_REPOS_ACTION,\n      });\n\n      const response = await fetch('/api/repos', {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.status !== 200) {\n        dispatch({\n          type: ERROR_LOAD_REPOS_ACTION,\n        });\n\n        return;\n      }\n\n      const { repositories } = await response.json();\n      localStorage.setItem(uniqueIdentifier, JSON.stringify(repositories));\n\n      dispatch({\n        type: LOAD_REPOS_ACTION,\n        payload: repositories,\n      });\n\n      return;\n    }\n  } catch (ex) {\n    dispatch({\n      type: ERROR_LOAD_REPOS_ACTION,\n    });\n\n    return ex;\n  }\n};\n","import React, { Fragment } from 'react';\n\nexport const WithLoadingIndicator = WrapperComponent => props => (\n  <Fragment>\n    {!props.data && props.isLoading && 'loading data...'}\n    <WrapperComponent {...props} />\n  </Fragment>\n);\n","import ReposContainer from './ReposContainer';\n\nexport { ReposContainer };\n","import React, { memo, useEffect, useMemo, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ReposList_container,\n  ReposList_row,\n  ReposList_cell,\n  ReposList_header,\n  ReposList_group_by,\n} from './ReposList.module.css';\n\nconst buildHeader = columns => (\n  <div className={ReposList_header}>\n    {columns.map((columnName, index) => (\n      <div key={index} className={ReposList_cell}>\n        {`${columnName.charAt(0).toUpperCase()}${columnName.slice(1)}`}\n      </div>\n    ))}\n  </div>\n);\n\nconst buildRows = (columns, list) => (\n  <Fragment>\n    {(list &&\n      list.length > 0 &&\n      list.map((item, rowIndex) => (\n        <div className={ReposList_row} key={rowIndex}>\n          {columns.map((columnName, columnIndex) => (\n            <div key={columnIndex} className={ReposList_cell}>\n              {item[columnName]}\n            </div>\n          ))}\n        </div>\n      ))) || <div className={ReposList_row}>No Items to display</div>}\n  </Fragment>\n);\n\nconst ReposList = memo(({ list, onLoad, groupBy, columns }) => {\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  const currentList = useMemo(() => {\n    if (groupBy) {\n      return Object.values(\n        list.reduce((acc, item) => {\n          const groupByValue = item[groupBy] || 'Not defined';\n\n          if (!acc[groupByValue]) {\n            acc[groupByValue] = {\n              groupBy: item[groupBy],\n              list: list.filter(listItem => item[groupBy] === listItem[groupBy]),\n            };\n          }\n          return acc;\n        }, {}),\n      );\n    }\n    return list;\n  }, [list, groupBy]);\n\n  // break component soon\n  if (columns && columns.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={ReposList_container}>\n      {!!groupBy && (\n        <Fragment>\n          {(currentList &&\n            currentList.length > 0 &&\n            currentList.map((currentItem, index) => (\n              <Fragment key={index}>\n                <div className={ReposList_group_by}>{currentItem.groupBy}</div>\n                {buildHeader(columns)}\n                {buildRows(columns, currentItem.list)}\n              </Fragment>\n            ))) || <div className={ReposList_row}>No Items to display</div>}\n        </Fragment>\n      )}\n      {!groupBy && (\n        <Fragment>\n          {buildHeader(columns)}\n          {buildRows(columns, currentList)}\n        </Fragment>\n      )}\n    </div>\n  );\n});\n\nReposList.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.object),\n  onLoad: PropTypes.func,\n  groupBy: PropTypes.string,\n  columns: PropTypes.PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nReposList.defaultProps = {\n  list: [],\n  onLoad: () => {},\n  groupBy: undefined,\n};\n\nexport default ReposList;\n","import ReposList from './ReposList';\n\nexport { ReposList };\n"],"sourceRoot":""}